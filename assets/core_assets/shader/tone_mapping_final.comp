#version 450
#extension GL_ARB_separate_shader_objects : enable


layout (constant_id = 0) const int HISTOGRAM_SLOTS = 256;
layout (constant_id = 2) const float HISTOGRAM_MIN = -10;
layout (constant_id = 3) const float HISTOGRAM_MAX = 10;

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

layout (set=1, binding = 2, r16f) uniform image2D adjustment_factor;

layout(set=1, binding = 1) buffer Data {
	uint histogram[HISTOGRAM_SLOTS + 4];
};


layout(push_constant) uniform Push_constants {
	// min/max log display luminance
	vec4 parameters;
} pcs;

#include "global_uniforms.glsl"

#define local_histogram histogram
#include "tone_mapping_prefix_sum.glsl"

float index_to_log_lum(uint index) {
	return float(index)/HISTOGRAM_SLOTS * (HISTOGRAM_MAX-HISTOGRAM_MIN) + HISTOGRAM_MIN;
}

void main() {
	float DISPLAY_MIN = pcs.parameters.x;
	float DISPLAY_MAX = pcs.parameters.y;

	// calculate constants
	uint local_id = gl_LocalInvocationID.x;
	uint local_size = gl_WorkGroupSize.x;

	build_prefix_sum();
	float sum = prefix_sum[HISTOGRAM_SLOTS];

	float display_range_factor = 1.0-uintBitsToFloat(histogram[HISTOGRAM_SLOTS]);
	float display_range_offset = uintBitsToFloat(histogram[HISTOGRAM_SLOTS+1]);
	float display_range = (DISPLAY_MAX-DISPLAY_MIN) * display_range_factor;
	float display_min   = DISPLAY_MIN + display_range_offset;

	for(uint i=local_id; i<HISTOGRAM_SLOTS; i+=local_size) {
		float prev = imageLoad(adjustment_factor, ivec2(i,0)).r;

		float curr_lum = exp(index_to_log_lum(i));
		float factor = exp(display_min + display_range * float(prefix_sum[i])/sum);
		factor = (factor - exp(DISPLAY_MIN)) / (exp(DISPLAY_MAX)-exp(DISPLAY_MIN));
		factor = clamp(factor / curr_lum, 0.0001, 1.0);

		if(!isnan(prev) && !isinf(prev))
			factor = mix(prev, factor, global_uniforms.time.z/0.2);

		imageStore(adjustment_factor, ivec2(i,0), vec4(factor));
	}
}
