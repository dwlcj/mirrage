#version 450
#extension GL_ARB_separate_shader_objects : enable


layout (constant_id = 0) const int HISTOGRAM_SLOTS = 256;
layout (constant_id = 2) const float HISTOGRAM_MIN = -10;
layout (constant_id = 3) const float HISTOGRAM_MAX = 10;
layout (constant_id = 4) const float DISPLAY_MIN = 0;
layout (constant_id = 5) const float DISPLAY_MAX = 1;

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1 ) in;

layout(binding = 1) buffer Data
{
	uint histogram[HISTOGRAM_SLOTS + 1];
};

shared uint local_histogram[HISTOGRAM_SLOTS];
shared int total;
shared int trimmings;


void main() {
	// calculate constants and initialize shared memory
	uint local_id = gl_LocalInvocationID.x + gl_LocalInvocationID.y*gl_WorkGroupSize.x;
	uint local_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;

	float world_range = HISTOGRAM_MAX - HISTOGRAM_MIN;
	float display_range = DISPLAY_MAX - DISPLAY_MIN;
	float bin_width = world_range / HISTOGRAM_SLOTS;

	total = 0;
	trimmings = 0;

	memoryBarrierShared();
	barrier();


	// copy histogram to shared memory and sum up total
	int sub_total = 0;
	for(uint i=local_id; i<HISTOGRAM_SLOTS; i+=local_size) {
		local_histogram[i] = histogram[i];
		sub_total += int(local_histogram[i]);
	}
	atomicAdd(total, sub_total);

	memoryBarrierShared();
	barrier();


	// trim histogram
	float tolerance = 0.025 * total;
	int safe_guard = 0;
	while(total>=tolerance && safe_guard++<100) {
		int ceiling = int(floor(total*bin_width / display_range));

		int sub_trimmings = 0;

		// trim each bucket
		for(uint i=local_id; i<HISTOGRAM_SLOTS; i+=local_size) {
			if(local_histogram[i] > ceiling) {
				sub_trimmings += int(local_histogram[i]) - ceiling;
				local_histogram[i] = uint(ceiling);
			}
		}

		// update total and sum sub-trimmings to check if we are done
		memoryBarrierShared();
		barrier();

		atomicAdd(total, -sub_trimmings);
		atomicAdd(trimmings, sub_trimmings);

		memoryBarrierShared();
		barrier();

		if(trimmings < tolerance)
			break;

		trimmings = 0;
	}


	// write result back to global memory
	for(uint i=local_id; i<HISTOGRAM_SLOTS; i+=local_size) {
		histogram[i] = local_histogram[i];
	}
}
