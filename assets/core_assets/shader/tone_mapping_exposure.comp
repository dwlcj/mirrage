#version 450
#extension GL_ARB_separate_shader_objects : enable


#define HISTOGRAM_SLOTS 256
#define WORKGROUP_SIZE 1
#define HISTOGRAM_MIN -10.0
#define HISTOGRAM_MAX 10.0

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

layout (binding = 0, r16f) uniform readonly image2D input_image;

layout(binding = 1) buffer Data
{
	uint histogram[HISTOGRAM_SLOTS + 1];
};


void main() {
	uint histogram_sum = 0;
	for(int i=0; i<HISTOGRAM_SLOTS; i++) {
		histogram_sum += histogram[i];
	}

	float n = histogram_sum;// * (1.0 - 0.5 - 0.05); // drop bottom 50% and top 5%

	float median_idx = (n+1.0)/2.0;

	float sum = 0;//-histogram_sum*0.5;
	float median = HISTOGRAM_SLOTS-1;
	for(int i=0; i<HISTOGRAM_SLOTS; i++) {
		sum += histogram[i];
		if(sum > median_idx) {
			median = i;
			break;
		}
	}

	sum = 0;
	float top = HISTOGRAM_SLOTS-1;
	for(int i=HISTOGRAM_SLOTS-1; i>0; i--) {
		sum += histogram[i];
		if(sum < histogram_sum*0.1) {
			top = i;
		} else {
			break;
		}
	}

	// TODO:
	float top_log_lum = top/HISTOGRAM_SLOTS * (HISTOGRAM_MAX-HISTOGRAM_MIN) + HISTOGRAM_MIN;
	float median_log_lum = median/HISTOGRAM_SLOTS * (HISTOGRAM_MAX-HISTOGRAM_MIN) + HISTOGRAM_MIN;

	float target_log_lum = median_log_lum;

	float L = pow(2, target_log_lum);
	float key = 1.03f - (2.0f / (2 + log(L + 1)/log(10)));
	float exposure = key/L;

	//exposure = exp(target_log_lum);

	histogram[HISTOGRAM_SLOTS] = floatBitsToUint(exposure);
}

